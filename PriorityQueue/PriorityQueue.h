/** PriorityQueue.h
 * The PriorityQueue ADT may store objects in any order. However,
 * removal of objects from the PQ must follow specific criteria. The
 * object of highest priority must be the one returned by the
 * remove() method; and if multiple objects have the same priority,
 * the one in the queue the longest shall be returned, ie, FIFO
 * return order must be preserved for objects of identical priority.
 *
 * Ranking of objects by priority is determined by the value of priority
 * in struct Element. By convention, the lower the value, the higher the
 * priority. All objects inserted into the PriorityQueue must be of type 
 * Element.
 *
 * IMPORTANT: DO NOT EDIT THIS FILE MY COPY WILL BE USED FOR TESTING
*/

#ifndef PA2_PRIORITY_QUEUE_PRIORITYQUEUE_H
#define PA2_PRIORITY_QUEUE_PRIORITYQUEUE_H

#include <memory>
#include <string>
#include <utility>
#include <climits>

// The default max_capacity that must be used for default constructors.
#define DEFAULT_MAX_CAPACITY 1000


// Struct Element that is inserted/removed from PriorityQueue 
typedef struct Element {
    // Name of element
    std::string name;
    // Priority of element
    int priority;
    // Time of insertion
    int fifo = 0;

    // Default constructor of struct Element
    Element() : name("None"), priority(-1) {};
    // Parameterized construct of struct Element
    Element(std::string s, int p) : name(std::move(s)), priority(p) {};
} Element;


// Node Struct to be used in PQLinkedList
typedef struct Node
{
    Element data;
    Node *next = nullptr;
} Node;


// Class PriorityQueue contains function declarations that must be defined 
// in the respective .cpp files. The PQUnordered, PQOrdered, and PQHeap 
// must be built from this class.
class PriorityQueue {
public:

    // The maximum number of elements allowed in PriorityQueue
    int max_capacity;

    // pq contains a smart pointer to an array of type struct Element
    // pq is used for PQOrdered and PQHeap, pq is NOT used for PQLinkedList
    std::unique_ptr<Element[]> pq;

    // Pointer to head Node for PQLinkedList
    // Use Node *head for PQLinkedList, Node *head is NOT used for PQHeap or PQOrdered
    Node *head;

public:
    // Default constructor
    PriorityQueue();

    // Parameterized constructor
    explicit PriorityQueue(int size);

    //  Inserts a new object into the priority queue.  Returns true if
    //  the insertion is successful.  If the PQ is full, the insertion
    //  is aborted, and the method returns false.
    bool insert(Element &element);

    //  The object of the highest priority must be the one returned by the
    //  remove() method; and if multiple objects have the same priority,
    //  the one in the queue the longest shall be returned, ie, FIFO
    //  return order must be preserved for objects of identical priority.
    //  Returns the default constructed Element if the PQ is empty.
    Element remove();

    //  Deletes all instances of the parameter from the PQ if found, and
    //  returns true.  Returns false if no match to the parameter obj is found.
    bool del(Element &element);

    //  Returns the object of highest priority in the PQ; if multiple
    //  objects have the same highest priority, return the one that has
    //  been in the PQ the longest, but does NOT remove it.
    //  Returns default constructed Element if the PQ is empty.
    Element peek();

    //  Returns true if the priority queue contains the specified element
    //  false otherwise.
    bool contains(Element &element);

    //  Returns the number of objects currently in the PQ.
    int size();

    //  Returns the PQ to its default state.
    void clear();

    //  Returns true if the PQ is empty, otherwise false.
    bool isEmpty();

    //  Returns true if the PQ is full, otherwise false.
    bool isFull();
};


#endif //PA2_PRIORITY_QUEUE_PRIORITYQUEUE_H